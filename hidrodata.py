import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import scipy.stats as stats

st.title("üìä –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫—Ä–∏–≤—ã—Ö –æ–±–µ—Å–ø–µ—á–µ–Ω–Ω–æ—Å—Ç–∏")

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ XLS —Ñ–∞–π–ª")
if uploaded_file:
    try:
        df = pd.read_excel(uploaded_file)
        st.success(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç {len(df)} —Å—Ç—Ä–æ–∫. \n\n –ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:")
        st.table(df.sample(5))
        #st.write(result['notes'])
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤
        numeric_cols = df.select_dtypes(include=['number']).columns
        cols = df.columns.tolist()
        if len(numeric_cols) == 0:
            st.error("–í —Ñ–∞–π–ª–µ –Ω–µ—Ç —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤")
        else:
            values_col = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫—Ä–∏–≤–æ–π –æ–±–µ—Å–ø–µ—á–µ–Ω–Ω–æ—Å—Ç–∏", numeric_cols)
            cols.insert(0, '–ë–µ–∑ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏')
            index_col = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö", cols)
            if index_col != '–ë–µ–∑ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏':
              aggfunc = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö", ['–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è', '–°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è', '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è'])
              aggfunc_dict = {'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è': 'max', '–°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è': 'mean', '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è': 'min'}
              data = df.pivot_table(index = index_col, values = values_col, aggfunc = aggfunc_dict[aggfunc])
            else:
              data = df[values_col]
            data = pd.DataFrame(data)
            data = data.sort_values(by=values_col)
            data['–†–∞–Ω–≥'] = range(len(data))
            data['–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å'] = 1 - (data['–†–∞–Ω–≥'] + 1) / (pivot_df['–†–∞–Ω–≥'].max() + 1)

            distributions = {'–ì—É–º–±–µ–ª—è': 'gumbel_r', '–§—Ä–µ—à–µ': 'genextreme', '–ü–∏—Ä—Å–æ–Ω–∞ 3 —Ç–∏–ø–∞': 'pearson3'}
            disribution = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏–∏", distributions)
            dist_key = distributions[disribution]
            selected_dist = getattr(stats, dist_key)  # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞—Å—Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è

            # –ü—Ä–∏–º–µ—Ä –≤—ã—á–∏—Å–ª–µ–Ω–∏—è PDF (—Ñ—É–Ω–∫—Ü–∏–∏ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏)
            data_points = np.linspace(-3, 3, 100)
            pdf_values = selected_dist.pdf(data_points, *params)  # params - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è

            # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∞ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –æ—Å–∏
            def scalefunc(x):
              return stats.norm.ppf(x/100, loc=0, scale=1)

            # –ì—Ä–∞—Ñ–∏–∫
            fig, ax = plt.subplots()
            params = selected_dist.fit(data[values_col])

            x = data['–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å'] * 100
            y = data['–í—ã—Å–æ—Ç–∞']
            plt.scatter(x, y, label='–≠–º–ø–∏—Ä–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ')

            # –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫—Ä–∏–≤–æ–π —Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
            def f(x):
                return selected_dist.ppf(1-x/100, params)
            f2 = np.vectorize(f)
            x = np.arange(0.1, 99.9, 0.1)
            plt.plot(x, f2(x), color = 'red', label='–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ')

            # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏–Ω–∏–π —Å–µ—Ç–∫–∏, –º–∞—Å—à—Ç–∞–±–∞ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –æ—Å–∏, –ø–æ–¥–ø–∏—Å–µ–π –æ—Å–µ–π –∏ –≥—Ä–∞—Ñ–∏–∫–∞,
            # –≥—Ä–∞–Ω–∏—Ü, —à–∞–≥–∞ –∏ –ø–æ–¥–ø–∏—Å–µ–π –¥–µ–ª–µ–Ω–∏–π –¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –æ—Å–∏
            ax.xaxis.grid(True)
            plt.xscale('function', functions=[scalefunc, lambda x: x])
            ax.set(xlabel="–û–±–µ—Å–ø–µ—á–µ–Ω–Ω–æ—Å—Ç—å, %")
            ax.set(ylabel="–ò–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º–∞—è –≤–µ–ª–∏—á–∏–Ω–∞")
            ax.set(title="–ó–Ω–∞—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º–æ–π –≤–µ–ª–∏—á–∏–Ω—ã —Å —Ä–∞–∑–Ω–æ–π –¥–æ–ª–µ–π –æ–±–µ—Å–ø–µ—á–µ–Ω–Ω–æ—Å—Ç–∏")
            ax.set(xlim=(0.1,99.9))
            plt.xticks([0.1, 1, 2, 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 95, 98, 99, 99.9])
            ax.set_xticklabels([0.1, 1, 2, 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 95, 98, 99, 99.9])
            plt.legend()
            st.pyplot(fig)

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞: {str(e)}")
